name: CI

on:
  push:
    branches: [ main, dev/auto-gekko ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Test CLI backtester
      run: |
        node src/engine/backtester.js --data test/sample-candles.csv --strategy strategies/sample-strategy.js > backtest-output.json
        cat backtest-output.json
    
    - name: Build web app
      run: npm run web:build
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          backtest-output.json
          test-results.xml
        retention-days: 30

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t gekko-modern:latest .
        docker images
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name gekko-test -p 3000:3000 gekko-modern:latest
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        docker stop gekko-test
    
    - name: Test Docker Compose
      run: |
        docker-compose build
        docker-compose up -d
        sleep 15
        curl -f http://localhost:3000/api/health || exit 1
        docker-compose down

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for secrets
      run: |
        # Check for potential secrets in code
        if grep -r "api_key\|secret\|password\|token" src/ --exclude-dir=node_modules --exclude="*.md" | grep -v "placeholder\|example\|test"; then
          echo "Potential secrets found in code!"
          exit 1
        fi
        echo "No secrets detected in source code"

  quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check code formatting
      run: |
        if command -v prettier &> /dev/null; then
          npm run format:check || echo "Prettier not configured"
        fi
    
    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME\|XXX" src/ --exclude-dir=node_modules; then
          echo "Found TODO/FIXME comments - consider addressing them"
        fi
    
    - name: Validate package.json
      run: |
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        echo "package.json is valid JSON"
    
    - name: Check dependencies
      run: |
        npm ls --depth=0
        echo "All dependencies resolved successfully"

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: |
        # Test backtester performance with larger dataset
        echo "Running performance benchmarks..."
        time node src/engine/backtester.js --data test/sample-candles.csv --strategy strategies/sample-strategy.js
    
    - name: Bundle size check
      run: |
        npm run web:build
        du -sh web/dist/
        echo "Web bundle built successfully"